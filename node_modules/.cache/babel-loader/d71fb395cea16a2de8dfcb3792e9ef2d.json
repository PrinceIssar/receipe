{"ast":null,"code":"var _jsxFileName = \"/Users/princeissar/git/BeCode/React-Projects/receipe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport './App.css';\nimport axios from \"axios\";\nimport Recipe from \"./Recipe\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport IconButton from '@material-ui/core/IconButton';\nimport Grid from '@material-ui/core/Grid';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { FacebookShareButton } from \"react-share\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: '2px 4px',\n    display: 'flex',\n    margin: '10px auto',\n    alignItems: 'center',\n    width: 400\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1\n  },\n  iconButton: {\n    padding: 10\n  }\n}));\n\nfunction App() {\n  _s();\n\n  const classes = useStyles(); // useEffect need for api\n\n  const APP_ID = '7a2529fc';\n  const APP_KEY = '61efe58ac251fd4cb77555211348d646\\t';\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\"); // not to have a default food\n  // don't want to render everytime someone writes a word but once he click search button\n\n  const [query, setQuery] = useState('chicken');\n  useEffect(() => {\n    //\n    getRecipe();\n  }, [query]); //useEffect:   [] will not run the effect array we gave is dependency\n  // whenever some click then only this query will work.\n  // to call api ,using axios installing axois in cdm\n\n  const getRecipe = async () => {\n    const response = await axios.get(`https:api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    setRecipes(response.data.hits);\n    console.log(response.data.hits);\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const updateQuery = e => {\n    e.preventDefault(); // this will stop the form to refresh\n\n    setQuery(search); // setQuery = search\n\n    setSearch(''); // once search is done we want to delete what was searched.\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Paper, {\n      onSubmit: updateQuery,\n      component: \"form\",\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(InputBase, {\n        type: \"text\",\n        value: search,\n        onChange: updateSearch,\n        className: classes.input,\n        placeholder: \"Search for Recipe\",\n        inputProps: {\n          'aria-label': 'Search for recipe'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        type: \"submit\",\n        className: classes.iconButton,\n        \"aria-label\": \"search\",\n        children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: recipes.map(recipe =>\n        /*#__PURE__*/\n        // will pass all props here title ,cal,img ,ingre in Recipe.js\n        _jsxDEV(Grid, {\n          item: true,\n          xs: 3,\n          children: /*#__PURE__*/_jsxDEV(Recipe, {\n            title: recipe.recipe.label,\n            calories: recipe.recipe.calories,\n            image: recipe.recipe.image,\n            ingredients: recipe.recipe.ingredients\n          }, recipe.recipe.label, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 23\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"Iq72sjOH3jvYT/MEPQJUzJpxva8=\", false, function () {\n  return [useStyles];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/princeissar/git/BeCode/React-Projects/receipe/src/App.js"],"names":["React","useState","useEffect","axios","Recipe","makeStyles","Paper","InputBase","IconButton","Grid","SearchIcon","FacebookShareButton","useStyles","theme","root","padding","display","margin","alignItems","width","input","marginLeft","spacing","flex","iconButton","App","classes","APP_ID","APP_KEY","recipes","setRecipes","search","setSearch","query","setQuery","getRecipe","response","get","data","hits","console","log","updateSearch","e","target","value","updateQuery","preventDefault","map","recipe","label","calories","image","ingredients"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport './App.css';\nimport axios from \"axios\";\nimport Recipe from \"./Recipe\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport IconButton from '@material-ui/core/IconButton';\nimport Grid from '@material-ui/core/Grid';\nimport SearchIcon from '@material-ui/icons/Search';\nimport {FacebookShareButton} from \"react-share\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: '2px 4px',\n        display: 'flex',\n        margin: '10px auto',\n        alignItems: 'center',\n        width: 400,\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: 10,\n    },\n\n}));\n\nfunction App() {\n    const classes = useStyles();\n  // useEffect need for api\n  const APP_ID = '7a2529fc';\n  const APP_KEY = '61efe58ac251fd4cb77555211348d646\\t';\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\"); // not to have a default food\n  // don't want to render everytime someone writes a word but once he click search button\n const [query, setQuery]= useState('chicken');\n  useEffect(() => {  //\n    getRecipe();\n  }, [query]); //useEffect:   [] will not run the effect array we gave is dependency\n// whenever some click then only this query will work.\n  // to call api ,using axios installing axois in cdm\n  const getRecipe = async () => {\n    const response = await axios.get(`https:api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    setRecipes(response.data.hits);\n    console.log(response.data.hits);\n  };\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  }\n\n  const updateQuery = (e) =>{\n    e.preventDefault(); // this will stop the form to refresh\n    setQuery(search);// setQuery = search\n      setSearch(''); // once search is done we want to delete what was searched.\n  }\n\n  return (\n      <div>\n          <Paper onSubmit={updateQuery} component=\"form\" className={classes.root}>\n\n              <InputBase\n                  type=\"text\"\n                  value={search}\n                  onChange={updateSearch}\n                  className={classes.input}\n                  placeholder=\"Search for Recipe\"\n                  inputProps={{ 'aria-label': 'Search for recipe' }}\n              />\n              <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\">\n                  <SearchIcon />\n              </IconButton>\n\n          </Paper>\n\n          <div>\n              <Grid container>\n                  {recipes.map((recipe) => (\n                      // will pass all props here title ,cal,img ,ingre in Recipe.js\n                      <Grid item xs={3}>\n                          <Recipe\n                              key={recipe.recipe.label}\n                              title={recipe.recipe.label}\n                              calories={recipe.recipe.calories}\n                              image={recipe.recipe.image}\n                              ingredients={recipe.recipe.ingredients}\n                          />\n                      </Grid>\n                  ))}\n              </Grid>\n          </div>\n      </div>\n  );\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}